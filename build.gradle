buildscript {
	ext {
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "de.richsource.gradle.plugins:typescript-gradle-plugin:1.8.0"
		classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.3.0'
	}
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: "de.richsource.gradle.plugins.typescript"
apply plugin: 'nebula.deb'

group = "org.monroe.team"
version = 0.1
description = "Bus based platform for a plugin (actor) based applications"
sourceCompatibility = 1.7
targetCompatibility = 1.7

bootRun {
	systemProperties = System.properties
}


repositories {
	mavenCentral()
}

configurations {
	dev
}

dependencies {
	dev("org.springframework.boot:spring-boot-devtools")
	compile("io.projectreactor:reactor-bus")
	compile('com.drewnoakes:metadata-extractor:2.9.1')
	compile("org.springframework.boot:spring-boot-starter-security")
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework:spring-web')
	compile('com.google.guava:guava:19.0')
	compile('org.webjars:jquery-mobile:1.4.5')
	compile group: 'org.thymeleaf', name: 'thymeleaf-spring4', version: '3.0.1.RELEASE'
	compile group: 'org.thymeleaf', name: 'thymeleaf', version: '3.0.1.RELEASE'
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("com.h2database:h2")
	compile group: 'com.google.guava', name: 'guava', version: '20.0'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

bootRun {
	// Use Spring Boot DevTool only when we run Gradle bootRun task
	classpath = sourceSets.main.runtimeClasspath + configurations.dev
	systemProperty "spring.profiles.active", "dev,default"
}

compileTypeScript {
	source = file("src/main/typescript")
	projectFile = file("tsconfig.json")
	outputDir = file("src/main/resources/static/generated-js")
}

compileJava.dependsOn(compileTypeScript)

task buildUpstartScript (dependsOn: clean) {
	doLast {
	file("${buildDir}/puzzle.conf").text =
"""
# Puzzle
#
# Puzzle application server: startup/shutdown upstart job
#

start on runlevel [23]
stop on runlevel [!23]

console log

env LANG=en_US.UTF-8
env JAVA_OPTIONS="-Xmx1000m"

script
  set -a
  . /etc/default/puzzle
  OPTIONS="-Dmedia.browser.image.cache.mb=300 -Dmedia.dispatching.watcher.watchFolders[0]=\$FOLDER_SINK -Dmedia.dispatching.catalog.folder=/opt/puzzle/catalog -Dvideo.ext.tool.tmp.folder=\$FOLDER_TMP -Dlog_folder=\$FOLDER_LOG -Dmedia.browser.index.file=\$FILE_DB"
  exec sudo -u $USER /usr/bin/java $JAVA_OPTIONS $OPTIONS -jar /opt/puzzle/bin/puzzle-0.1.jar
end script

""".trim();

		file("${buildDir}/puzzle").text =
				"""
#
# Puzzle application server: configuration file
#

FOLDER_SINK="/opt/puzzle/sink"
FOLDER_TMP="/opt/puzzle/tmp"
FOLDER_LOG="/var/log/puzzle"
FILE_DB="/opt/puzzle/embedded.index"
USER=YOUR_USER_HERE

""".trim();
	}
}

task releaseDeb(type: Deb, group: "release", dependsOn: [clean, build, buildUpstartScript] ) {

	maintainer = "Mr. Jbee (MisterJBee at gmail.com)"
	release = '1'
	into '/opt/puzzle'

	from(jar.outputs.files) {
		into 'bin'
	}

	from("${buildDir}/puzzle.conf"){
		into "/etc/init"
	}

	from("${buildDir}/puzzle"){
		into "/etc/default"
	}

	directory('/opt/puzzle/catalog')
	directory('/opt/puzzle/sink')
	directory('/opt/puzzle/tmp')
	directory('/var/log/puzzle')
	//openjdk-7-jre
	//oracle-java8-installer and oracle-java8-set-default
}

build.mustRunAfter clean
